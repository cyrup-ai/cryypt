//! Extension traits for ergonomic error handling

use super::types::{Error, ErrorKind, Result};
use std::fmt;

/// Extension trait for adding context to Results
pub trait ResultExt<T> {
    /// Add context to an error
    ///
    /// # Errors
    ///
    /// Returns an error with the provided context if the original result was an error.
    fn context<C: fmt::Display>(self, context: C) -> Result<T>;

    /// Add context with a closure (only called on error)
    ///
    /// # Errors
    ///
    /// Returns an error with context generated by the closure if the original result was an error.
    fn with_context<C, F>(self, f: F) -> Result<T>
    where
        C: fmt::Display,
        F: FnOnce() -> C;
}

impl<T, E> ResultExt<T> for std::result::Result<T, E>
where
    E: std::error::Error + Send + Sync + 'static,
{
    fn context<C: fmt::Display>(self, context: C) -> Result<T> {
        self.map_err(|e| Error::with_source(ErrorKind::Internal, e).context(context))
    }

    fn with_context<C, F>(self, f: F) -> Result<T>
    where
        C: fmt::Display,
        F: FnOnce() -> C,
    {
        self.map_err(|e| Error::with_source(ErrorKind::Internal, e).context(f()))
    }
}

/// Extension trait for Options to convert to Results with context
pub trait OptionExt<T> {
    /// Convert None to an error with context
    ///
    /// # Errors
    ///
    /// Returns a not found error with the provided context if the option is None.
    fn context<C: fmt::Display>(self, context: C) -> Result<T>;

    /// Convert None to an error with a closure for context
    ///
    /// # Errors
    ///
    /// Returns a not found error with context generated by the closure if the option is None.
    fn with_context<C, F>(self, f: F) -> Result<T>
    where
        C: fmt::Display,
        F: FnOnce() -> C;
}

impl<T> OptionExt<T> for Option<T> {
    fn context<C: fmt::Display>(self, context: C) -> Result<T> {
        self.ok_or_else(|| Error::not_found().context(context))
    }

    fn with_context<C, F>(self, f: F) -> Result<T>
    where
        C: fmt::Display,
        F: FnOnce() -> C,
    {
        self.ok_or_else(|| Error::not_found().context(f()))
    }
}

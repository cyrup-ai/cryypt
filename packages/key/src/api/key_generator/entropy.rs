//! Entropy sources for cryptographically secure key generation
//!
//! Contains RNG management and entropy pool functionality for secure key generation.

use crate::entropy::{EntropySource, MIN_ENTROPY_THRESHOLD};
use rand::{RngCore, rng};

/// Entropy source configuration for key generation
/// Encapsulates entropy quality and source management
#[derive(Debug, Clone, Copy)]
pub struct EntropyConfig {
    /// Whether to use hardware entropy sources when available
    pub use_hardware_entropy: bool,
    /// Minimum entropy bits required for key generation
    pub min_entropy_bits: usize,
    /// Whether to perform entropy quality tests
    pub test_entropy_quality: bool,
}

impl EntropyConfig {
    /// Create high-security entropy configuration
    /// Uses hardware entropy with quality testing
    #[must_use]
    pub const fn high_security() -> Self {
        Self {
            use_hardware_entropy: true,
            min_entropy_bits: 256,
            test_entropy_quality: true,
        }
    }

    /// Create standard entropy configuration
    /// Balanced security and performance
    #[must_use]
    pub const fn standard() -> Self {
        Self {
            use_hardware_entropy: true,
            min_entropy_bits: 128,
            test_entropy_quality: false,
        }
    }

    /// Create performance-optimized entropy configuration
    /// Prioritizes speed over maximum security
    #[must_use]
    pub const fn performance() -> Self {
        Self {
            use_hardware_entropy: false,
            min_entropy_bits: 128,
            test_entropy_quality: false,
        }
    }
}

impl Default for EntropyConfig {
    fn default() -> Self {
        Self::standard()
    }
}

/// Secure entropy provider for key generation
/// Wraps the underlying RNG with additional security measures
pub struct EntropyProvider {
    config: EntropyConfig,
}

impl Default for EntropyProvider {
    fn default() -> Self {
        Self::new(EntropyConfig::default())
    }
}

impl EntropyProvider {
    /// Create a new entropy provider with specified configuration
    #[must_use]
    pub fn new(config: EntropyConfig) -> Self {
        Self { config }
    }

    /// Create entropy provider with default configuration
    #[must_use]
    pub fn with_default_config() -> Self {
        Self::new(EntropyConfig::default())
    }

    /// Fill a buffer with cryptographically secure random bytes
    /// Uses the configured entropy sources and quality checks
    pub fn fill_bytes(&self, buf: &mut [u8]) {
        // Use thread-local RNG for maximum security
        // This provides cryptographically secure random bytes
        rng().fill_bytes(buf);

        // Additional entropy quality checks could be implemented here
        // based on the configuration settings
        if self.config.test_entropy_quality {
            Self::verify_entropy_quality(buf);
        }
    }

    /// Generate a random u64 value
    /// Uses secure entropy sources
    #[must_use]
    pub fn next_u64(&self) -> u64 {
        rng().next_u64()
    }

    /// Generate a random u32 value
    /// Uses secure entropy sources
    #[must_use]
    pub fn next_u32(&self) -> u32 {
        rng().next_u32()
    }

    /// Verify entropy quality of generated bytes
    /// Performs basic statistical tests on the entropy
    fn verify_entropy_quality(bytes: &[u8]) {
        let entropy_source = EntropySource::default();
        let entropy = entropy_source.estimate_entropy(bytes);

        if entropy < MIN_ENTROPY_THRESHOLD {
            tracing::warn!(
                "Entropy quality below threshold: {:.2} < {:.2}",
                entropy,
                MIN_ENTROPY_THRESHOLD
            );
        } else {
            tracing::debug!("Entropy quality verified: {:.2} bits/byte", entropy);
        }
    }

    /// Get the current entropy configuration
    #[must_use]
    pub fn config(&self) -> &EntropyConfig {
        &self.config
    }

    /// Update the entropy configuration
    pub fn set_config(&mut self, config: EntropyConfig) {
        self.config = config;
    }
}

/// Global entropy provider for convenient access
/// Uses secure defaults for most use cases
static GLOBAL_ENTROPY: std::sync::LazyLock<std::sync::Mutex<EntropyProvider>> =
    std::sync::LazyLock::new(|| std::sync::Mutex::new(EntropyProvider::default()));

/// Fill a buffer with cryptographically secure random bytes using global provider
/// Convenience function for simple use cases
pub fn fill_secure_random(buf: &mut [u8]) {
    if let Ok(provider) = GLOBAL_ENTROPY.lock() {
        provider.fill_bytes(buf);
    } else {
        // Fallback to direct RNG if lock fails
        rng().fill_bytes(buf);
    }
}

/// Generate secure random bytes and return as Vec
/// Convenience function for allocating random data
#[must_use]
pub fn generate_secure_bytes(size: usize) -> Vec<u8> {
    let mut bytes = vec![0u8; size];
    fill_secure_random(&mut bytes);
    bytes
}

/// Configure the global entropy provider
/// Affects all subsequent calls to global entropy functions
pub fn configure_global_entropy(config: EntropyConfig) {
    if let Ok(mut provider) = GLOBAL_ENTROPY.lock() {
        provider.set_config(config);
    }
}
